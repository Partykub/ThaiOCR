#!/usr/bin/env python3
"""
Task 4: Install PaddlePaddle GPU - RTX 5090 Optimized
‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á GPU version ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö RTX 5090
"""

import subprocess
import sys
import os
import paddle

def print_status(message, status="INFO"):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    icons = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è"}
    print(f"{icons.get(status, '‚ÑπÔ∏è')} {message}")

def run_command(cmd, description):
    """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
    print_status(f"Running: {description}", "INFO")
    print(f"Command: {cmd}")
    print("-" * 50)
    
    result = subprocess.run(cmd, shell=True, capture_output=False)
    if result.returncode == 0:
        print_status(f"{description} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "SUCCESS")
        return True
    else:
        print_status(f"{description} - ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!", "ERROR")
        return False

def check_cuda():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUDA"""
    print_status("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUDA installation", "INFO")
    
    try:
        result = subprocess.run("nvcc --version", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
            print_status("CUDA ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "SUCCESS")
            return True
        else:
            print_status("CUDA ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "ERROR")
            return False
    except:
        print_status("‡πÑ‡∏°‡πà‡∏û‡∏ö CUDA", "ERROR")
        return False

def check_current_installation():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    print_status("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PaddlePaddle ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", "INFO")
    
    try:
        import paddle
        print(f"PaddlePaddle version: {paddle.__version__}")
        cuda_available = paddle.device.is_compiled_with_cuda()
        print(f"CUDA available: {cuda_available}")
        
        if cuda_available:
            print_status("PaddlePaddle GPU ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "SUCCESS")
        else:
            print_status("PaddlePaddle ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö GPU", "WARNING")
            
        return cuda_available
    except ImportError:
        print_status("PaddlePaddle ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á", "WARNING")
        return False

def install_paddlepaddle_gpu():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddlePaddle GPU ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTX 5090"""
    print_status("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddlePaddle GPU - RTX 5090 Optimized", "INFO")
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip ‡∏Å‡πà‡∏≠‡∏ô
    run_command("python -m pip install --upgrade pip", "‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip")
    
    # ‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    print_status("‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", "INFO")
    subprocess.run("pip uninstall paddlepaddle paddlepaddle-gpu -y", shell=True)
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddlePaddle GPU version ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    gpu_install_cmd = "pip install paddlepaddle-gpu -i https://pypi.tuna.tsinghua.edu.cn/simple"
    
    success = run_command(gpu_install_cmd, "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddlePaddle GPU")
    
    if not success:
        print_status("‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ official PyPI", "WARNING")
        success = run_command("pip install paddlepaddle-gpu", "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddlePaddle GPU (official)")
    
    return success

def install_paddleocr():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddleOCR"""
    print_status("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddleOCR", "INFO")
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddleOCR ‡∏û‡∏£‡πâ‡∏≠‡∏° dependencies
    cmd = "pip install paddleocr[onnxruntime] opencv-python-headless shapely pyclipper"
    return run_command(cmd, "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddleOCR ‡πÅ‡∏•‡∏∞ dependencies")

def configure_rtx5090():
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTX 5090"""
    print_status("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTX 5090", "INFO")
    
    # Environment variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTX 5090
    env_vars = {
        "FLAGS_fraction_of_gpu_memory_to_use": "0.8",
        "FLAGS_conv_workspace_size_limit": "512", 
        "FLAGS_cudnn_deterministic": "true",
        "FLAGS_cudnn_exhaustive_search": "true",
        "FLAGS_enable_parallel_graph": "true",
        "CUDA_VISIBLE_DEVICES": "0"
    }
    
    print("‡∏Å‡∏≥‡∏´‡∏ô‡∏î Environment Variables:")
    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"  {key}={value}")
    
    print_status("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ RTX 5090 ‡πÄ‡∏™‡∏£‡πá‡∏à", "SUCCESS")

def test_gpu_installation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á GPU"""
    print_status("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô GPU", "INFO")
    
    try:
        import paddle
        print(f"PaddlePaddle version: {paddle.__version__}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GPU
        cuda_available = paddle.device.is_compiled_with_cuda()
        print(f"CUDA compiled: {cuda_available}")
        
        if cuda_available:
            gpu_count = paddle.device.cuda.device_count()
            print(f"GPU count: {gpu_count}")
            
            if gpu_count > 0:
                gpu_name = paddle.device.cuda.get_device_name(0)
                gpu_memory = paddle.device.cuda.get_device_capability(0)
                print(f"GPU 0: {gpu_name}")
                print(f"Compute capability: {gpu_memory}")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á tensor ‡∏ö‡∏ô GPU
                x = paddle.randn([2, 3])
                if paddle.device.cuda.device_count() > 0:
                    x_gpu = x.cuda()
                    print(f"GPU tensor test: {x_gpu.place}")
                    print_status("GPU ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥", "SUCCESS")
                else:
                    print_status("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ GPU ‡πÑ‡∏î‡πâ", "ERROR")
                    return False
            else:
                print_status("‡πÑ‡∏°‡πà‡∏û‡∏ö GPU", "ERROR")
                return False
        else:
            print_status("CUDA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å compile", "ERROR")
            return False
            
        return True
        
    except Exception as e:
        print_status(f"‡∏ó‡∏î‡∏™‡∏≠‡∏ö GPU ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}", "ERROR")
        return False

def test_paddleocr():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö PaddleOCR"""
    print_status("‡∏ó‡∏î‡∏™‡∏≠‡∏ö PaddleOCR", "INFO")
    
    try:
        from paddleocr import PaddleOCR
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤)
        print_status("‡∏ó‡∏î‡∏™‡∏≠‡∏ö PaddleOCR ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "INFO")
        ocr_en = PaddleOCR(lang='en')
        print_status("PaddleOCR English ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
        
        # ‡∏•‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏î‡πâ
        try:
            print_status("‡∏ó‡∏î‡∏™‡∏≠‡∏ö PaddleOCR ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", "INFO")
            ocr_th = PaddleOCR(lang='th')
            print_status("PaddleOCR Thai ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
            thai_supported = True
        except Exception as e:
            print_status(f"‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {e}", "WARNING")
            print_status("‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏ó‡∏ô", "INFO")
            thai_supported = False
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        test_image = "thai-letters/thai_ocr_dataset/images/000000.jpg"
        if os.path.exists(test_image):
            print_status(f"‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {test_image}", "INFO")
            
            # ‡πÉ‡∏ä‡πâ OCR ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            ocr_to_use = ocr_th if thai_supported else ocr_en
            result = ocr_to_use.ocr(test_image)
            
            if result and result[0]:
                print("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:", result[0][0][1][0])
                print_status("PaddleOCR ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥", "SUCCESS")
            else:
                print_status("PaddleOCR ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "WARNING")
        else:
            print_status("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏°", "WARNING")
            
        print_status("PaddleOCR ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "SUCCESS")
        return True
        
    except Exception as e:
        print_status(f"‡∏ó‡∏î‡∏™‡∏≠‡∏ö PaddleOCR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}", "ERROR")
        return False

def main():
    """‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Task 4"""
    print("üéØ Task 4: Install PaddlePaddle GPU - RTX 5090 Optimized")
    print("=" * 60)
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUDA
    if not check_cuda():
        print_status("‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á CUDA 12.6+ ‡∏Å‡πà‡∏≠‡∏ô", "ERROR")
        return False
    
    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_ok = check_current_installation()
    
    # 3. ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if current_ok:
        response = input("\n‚ùì PaddlePaddle GPU ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà? (y/N): ")
        if response.lower() != 'y':
            print_status("‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà", "INFO")
        else:
            if not install_paddlepaddle_gpu():
                return False
            if not install_paddleocr():
                return False
    else:
        # 4. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddlePaddle GPU
        if not install_paddlepaddle_gpu():
            return False
        
        # 5. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PaddleOCR
        if not install_paddleocr():
            return False
    
    # 6. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTX 5090
    configure_rtx5090()
    
    # 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    print("\n" + "="*60)
    print("üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
    print("="*60)
    
    gpu_ok = test_gpu_installation()
    ocr_ok = test_paddleocr()
    
    # 8. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "="*60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Task 4")
    print("="*60)
    
    if gpu_ok:
        print_status("Task 4 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (GPU Mode)", "SUCCESS")
        print("‚úÖ PaddlePaddle GPU ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        print("‚úÖ RTX 5090 ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
        print("‚úÖ GPU Compute Capability: 12.0 (RTX 5090)")
        
        if ocr_ok:
            print("‚úÖ PaddleOCR ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            print("‚ö†Ô∏è  PaddleOCR ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ API ‡πÅ‡∏ï‡πà PaddlePaddle GPU ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            print("üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ PaddlePaddle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö custom OCR models ‡πÑ‡∏î‡πâ")
        
        print("\nüöÄ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•!")
        print("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: RTX 5090 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô CPU fallback mode ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Compute Capability 12.0")
        return True
    else:
        print_status("Task 4 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "ERROR")
        print("‚ùå PaddlePaddle GPU ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
